-- Supabase SQL Script (V3 with Tags)
-- 1. Creates the "ideas" table with a 'tags' column (text array).
-- 2. Inserts the 6 business ideas with multiple tags.

-- Drop table if it exists for a clean start
DROP TABLE IF EXISTS public.ideas;

-- Create the "ideas" table with the new structure
CREATE TABLE public.ideas (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  tags text[], -- New column for an array of tags
  title text,
  summary text, -- Kept for the card preview
  icon text,
  details text -- Column for Markdown content
);

-- Enable Row Level Security and allow public read access
ALTER TABLE public.ideas ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public ideas are viewable by everyone." ON public.ideas FOR SELECT USING (true);


-- Insert all 6 ideas into the table with combined Markdown for 'details' and an array for 'tags'
INSERT INTO public.ideas (tags, title, summary, icon, details)
VALUES
(
  ARRAY['Healthcare', 'Wellness', 'AI', 'Data Science'],
  'AI Chronic Condition Companion',
  'A personal AI to help patients identify triggers and manage chronic, fluctuating conditions.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-rose-500"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.4 15H15"/><path d="M15 3.4V15"/></svg>',
  '### The Problem
Patients with chronic, fluctuating conditions like IBS, migraines, endometriosis, or fibromyalgia struggle to identify personal triggers and manage their symptoms. Generic health apps are too broad and don''t account for the complex interplay of diet, stress, sleep, and environmental factors unique to each individual.

### The Solution
A dedicated mobile app that acts as an AI-powered companion. The user can log symptoms through a conversational interface, connect wearable device data (sleep, heart rate), and even upload photos of meals. The AI uses pattern recognition to synthesize this data and provide hyper-personalized insights. For example, it might identify a correlation between a specific food ingredient, a dip in sleep quality, and a symptom flare-up 48 hours later.

### Unique Value
It''s not a diagnostic tool but a personal pattern-finder. It empowers patients with data-driven insights to have more informed conversations with their doctors and make proactive lifestyle adjustments. This level of deep, personalized analysis for specific, often underserved, conditions is a clear gap in the market.'
),
(
  ARRAY['Education', 'Corporate', 'AI', 'Simulation'],
  'Adaptive Soft-Skills Training Simulator',
  'An AI-powered simulation platform for employees to practice soft skills in a safe, realistic environment.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-blue-500"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"/></svg>',
  '### The Problem
Corporate training for soft skills (e.g., leadership, conflict resolution, negotiation) is often passive and theoretical, relying on videos and multiple-choice quizzes. Employees don''t get a chance to practice these skills in a safe, realistic environment.

### The Solution
An AI-powered simulation platform where employees engage in interactive role-playing with AI personas. A new manager could practice giving difficult feedback to an "AI employee" that responds dynamically to their tone, word choice, and conversational strategy. The platform would provide instant, private feedback on the user''s performance, suggesting alternative phrasings and approaches.

### Unique Value
Moves beyond passive learning to active practice. The dynamic nature of the AI creates a highly realistic and endlessly replayable training environment. It allows for failure and learning without real-world consequences, which is crucial for building confidence in sensitive interpersonal skills.'
),
(
  ARRAY['Logistics', 'Local Business', 'B2B', 'Optimization'],
  'Collaborative Last-Mile Delivery Network',
  'A B2B platform creating a cooperative delivery network for small, local retail businesses.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-orange-500"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>',
  '### The Problem
Small, local retail businesses (like florists, bakeries, independent pharmacies, and bookstores) struggle to compete with the fast, cheap delivery offered by large e-commerce players. Running their own delivery service is prohibitively expensive, and existing third-party platforms take a large commission.

### The Solution
A B2B platform that creates a cooperative delivery network. Participating local businesses list their delivery needs for the day. An AI-powered logistics engine analyzes all requests and calculates the most efficient, consolidated routes. A single driver might pick up a cake from a bakery, flowers from a florist, and a book from a shop and deliver them all in one optimized trip through the same neighborhood.

### Unique Value
This is a "many-to-many" logistics model for local commerce, not a "one-to-many" model like a single restaurant''s delivery. By pooling resources, small businesses can offer competitive delivery rates, reduce their carbon footprint, and keep more of their revenue. It strengthens the local business ecosystem rather than extracting value from it.'
),
(
  ARRAY['Sustainability', 'Environment', 'AI', 'IoT'],
  'AI-Powered Home & Office Waste Auditor',
  'A smart bin system that uses AI to provide real-time feedback on recycling and waste reduction.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-green-500"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="M12 12c-3 0-5 2.5-5 5 0 1.5 1 2.5 2.5 2.5S12 21 12 19c0-1.5-1-2.5-2.5-2.5S7 15 7 16.5c0 .75.25 1.5 1 1.5"/><path d="M15.5 6.5c1.5 0 2.5.5 2.5 1.5s-1 1.5-2.5 1.5S13 9 13 8s1-1.5 2.5-1.5"/></svg>',
  '### The Problem
Many people and businesses want to reduce waste and recycle correctly but lack the knowledge and tools. Recycling rules are confusing and vary by location, and it''s hard to grasp the cumulative impact of daily consumption habits.

### The Solution
A smart bin system equipped with a camera and an AI model trained to identify different types of waste. As an item is thrown away, the system provides real-time feedback on a small screen or connected app (e.g., "This plastic container is recyclable, but please rinse it first," or "Coffee cups like this are not recyclable in your area."). It also aggregates data over time, providing a dashboard with insights and suggestions, such as, "You''ve discarded 3 lbs of vegetable scraps this month. Have you considered composting?"

### Unique Value
It addresses the problem at the point of actionâ€”the moment of disposal. This combination of real-time education and long-term data analysis can effectively change user behavior, moving beyond simple carbon footprint calculators to provide a tangible, actionable tool for waste reduction.'
),
(
  ARRAY['Small Business', 'Automation', 'AI', 'No-Code'],
  'No-Code AI Workflow Builder for Niche Verticals',
  'AI-powered templates to help SMBs in niche verticals build complex, automated workflows.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-indigo-500"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>',
  '### The Problem
Generic automation tools (like Zapier or IFTTT) are great for simple, linear tasks but often fall short for businesses with unique, multi-step workflows (e.g., a custom furniture maker, a pet grooming salon, a specialized legal consultant). Custom software is far too expensive for these SMBs.

### The Solution
A subscription-based platform that provides AI-powered workflow templates for specific business verticals. A user selects their industry and a template (e.g., "Custom Cake Order Management"). The AI then asks a series of questions to configure a complete workflow, from a customer-facing intake form with image uploads to automated inventory checks for ingredients, payment processing, and scheduling alerts for the bakers. The AI learns from each business''s usage to refine and improve the templates over time.

### Unique Value
The focus on vertical-specific templates makes powerful automation accessible to non-technical business owners. Instead of starting from scratch, they get a workflow that is 80% complete and can be easily customized, solving complex, industry-specific problems that horizontal automation tools can''t handle out of the box.'
),
(
  ARRAY['Personal Finance', 'AI', 'Simulation', 'FinTech'],
  'Financial & Lifestyle Simulator',
  'An AI tool to model the holistic financial and lifestyle impact of major life decisions.',
  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8 text-amber-500"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>',
  '### The Problem
Traditional budgeting apps are good for tracking past expenses but poor at helping people make complex future decisions. An individual considering a career change, a cross-country move, or starting a family has no easy way to model the long-term financial and lifestyle impacts of these choices.

### The Solution
An AI-powered simulation tool that models the holistic impact of major life decisions. A user inputs their current financial situation and goals. They can then create a "simulation," such as: "What if I quit my corporate job to become a freelance designer and move from San Francisco to Austin?" The AI would use public data (cost of living indexes, average freelance rates, housing prices) and the user''s personal data to project changes in discretionary income, savings rate, work-life balance (based on estimated hours), and progress toward long-term goals like retirement.

### Unique Value
This tool focuses on proactive decision-making rather than reactive expense tracking. It quantifies the complex trade-offs between different life paths, empowering users to make more informed choices that align with both their financial and personal aspirations.'
);

ALTER TABLE ideas ADD COLUMN user_id uuid;

CREATE POLICY "Allow all authenticated insert"
ON ideas
FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Create favorites table
create table if not exists public.favorites (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  idea_id bigint not null references public.ideas(id) on delete cascade,
  created_at timestamptz default now(),
  -- avoid duplicates
  unique (user_id, idea_id)
);

-- Performance index on idea_id (optional)
create index if not exists idx_favorites_idea_id on public.favorites (idea_id);
create index if not exists idx_favorites_user_id on public.favorites (user_id);

-- Enable Row Level Security
alter table public.favorites enable row level security;

-- Allow authenticated users to SELECT only their favorites
create policy "select_own_favorites" on public.favorites
  for select using (user_id = auth.uid());

-- Allow authenticated users to INSERT a favorite only if the row.user_id == auth.uid()
create policy "insert_own_favorites" on public.favorites
  for insert with check (user_id = auth.uid());

-- Allow authenticated users to DELETE their own favorites
create policy "delete_own_favorites" on public.favorites
  for delete using (user_id = auth.uid());


  ALTER TABLE ideas
ADD COLUMN generated_by_ai boolean DEFAULT false;

CREATE TABLE pitch_deck (
    id serial PRIMARY KEY,
    idea_id int8 REFERENCES ideas(id) ON DELETE CASCADE,
    slides jsonb NOT NULL,
    created_at timestamptz DEFAULT now(),
    created_by uuid REFERENCES auth.users(id)
);

-- If you have a 'profiles' table linked to auth.users:
CREATE TABLE profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    plan text DEFAULT 'free',
    subscription_id text,
    is_premium boolean DEFAULT false,
    role text DEFAULT 'user',
    bio text,
    avatar_url text
);

CREATE TABLE plans (
    id serial PRIMARY KEY,
    name text NOT NULL,
    features jsonb,
    price numeric,
    created_at timestamptz DEFAULT now()
);

CREATE TABLE comments (
    id serial PRIMARY KEY,
    idea_id int8 REFERENCES ideas(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    text text NOT NULL,
    created_at timestamptz DEFAULT now()
);

CREATE TABLE upvotes (
    id serial PRIMARY KEY,
    idea_id int8 REFERENCES ideas(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now(),
    UNIQUE (idea_id, user_id)
);

CREATE TABLE reports (
    id serial PRIMARY KEY,
    reported_by uuid REFERENCES auth.users(id),
    idea_id int8 REFERENCES ideas(id) ON DELETE CASCADE,
    reason text,
    status text DEFAULT 'pending',
    created_at timestamptz DEFAULT now()
);

CREATE TABLE bans (
    id serial PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id),
    reason text,
    created_at timestamptz DEFAULT now(),
    expires_at timestamptz
);

CREATE TABLE events (
    id serial PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id),
    event_type text NOT NULL,
    data jsonb,
    created_at timestamptz DEFAULT now()
);


-- table to track usage/quota for each user
create table if not exists ai_key_usage (
  id uuid default gen_random_uuid() primary key,
  user_id text not null,           -- supabase auth user id
  provider text not null,          -- e.g., 'gemini'
  uses_remaining integer not null default 10,
  created_at timestamptz default now()
);

-- index
create index if not exists idx_ai_key_usage_user on ai_key_usage(user_id, provider);

-- optional: per-user provided keys (encrypted at application level)
create table if not exists ai_user_keys (
  id uuid default gen_random_uuid() primary key,
  user_id text not null,
  provider text not null,
  encrypted_key text not null,     -- store encrypted value; decrypt only on server
  uses_remaining integer not null default 0,
  created_at timestamptz default now()
);


-- 2. Atomic RPC: decrement usage if available
create or replace function decrement_ai_usage_if_available(p_user_id text, p_provider text)
returns table(ok boolean) language plpgsql as $$
begin
  update ai_key_usage
  set uses_remaining = uses_remaining - 1
  where user_id = p_user_id and provider = p_provider and uses_remaining > 0
  returning true into ok;

  if found then
    return query select true as ok;
  else
    return query select false as ok;
  end if;
end;
$$;


insert into ai_key_usage(user_id, provider, uses_remaining)
values ('5d44c448-61ea-4ef1-a68f-9e8a1b202229', 'gemini', 10);

select * from ai_key_usage


ALTER TABLE pitch_deck ENABLE ROW LEVEL SECURITY;

select count(*) from upvotes
ALTER TABLE ai_user_keys ENABLE ROW LEVEL SECURITY;


ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow select for authenticated users"
ON comments
FOR SELECT
USING (auth.role() = 'authenticated');

CREATE POLICY "Allow insert for authenticated users"
ON comments
FOR INSERT
WITH CHECK (auth.role() = 'authenticated' AND user_id = auth.uid());

CREATE POLICY "Allow delete own comments"
ON comments
FOR DELETE
USING (auth.role() = 'authenticated' AND user_id = auth.uid());

CREATE POLICY "Allow update own comments"
ON comments
FOR UPDATE
USING (auth.role() = 'authenticated' AND user_id = auth.uid());


-- Enable Row Level Security on profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Allow select for authenticated users
CREATE POLICY "Allow select for authenticated users"
ON public.profiles
FOR SELECT
USING (auth.role() = 'authenticated');

-- Allow update only own profile
CREATE POLICY "Allow update own profile"
ON public.profiles
FOR UPDATE
USING (auth.role() = 'authenticated' AND id = auth.uid());

-- (Optional) Allow delete only own profile
CREATE POLICY "Allow delete own profile"
ON public.profiles
FOR DELETE
USING (auth.role() = 'authenticated' AND id = auth.uid());


ALTER TABLE public.profiles ADD COLUMN display_name text;


ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow insert own profile"
ON public.profiles
FOR INSERT
WITH CHECK (auth.role() = 'authenticated' AND id = auth.uid());



-- upvotes_rls.sql
-- Enable Row Level Security on upvotes table
ALTER TABLE public.upvotes ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to see upvotes (needed for counting)
CREATE POLICY "Allow select for authenticated users"
ON public.upvotes
FOR SELECT
USING (auth.role() = 'authenticated');

-- Allow authenticated users to add their own upvotes
CREATE POLICY "Allow insert for authenticated users"
ON public.upvotes
FOR INSERT
WITH CHECK (auth.role() = 'authenticated' AND user_id = auth.uid());

-- Allow authenticated users to delete their own upvotes
CREATE POLICY "Allow delete own upvotes"
ON public.upvotes
FOR DELETE
USING (auth.role() = 'authenticated' AND user_id = auth.uid());

-- Prevent duplicate upvotes by creating a unique constraint
ALTER TABLE public.upvotes 
ADD CONSTRAINT unique_user_idea_upvote UNIQUE (user_id, idea_id);

-- Index for faster upvote counts per idea
CREATE INDEX IF NOT EXISTS idx_upvotes_idea_id ON public.upvotes (idea_id);

-- Index for faster user upvote checks
CREATE INDEX IF NOT EXISTS idx_upvotes_user_id ON public.upvotes (user_id);
